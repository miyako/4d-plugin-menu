/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-menu.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : menu
 #	author : miyako
 #	2025/08/06
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-menu.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- menu
            
			case 1 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)INVOKE_MENU_ACTION, params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

static void InvokeMenuAction(SEL selector) {
    NSWindow *window = [NSApp keyWindow];
    if(window) {
        NSResponder *responder = [window firstResponder];
        while (responder) {
            if ([responder respondsToSelector:selector]) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    [responder performSelector:selector withObject:nil];
                });
                break;
            }
            responder = [responder nextResponder];
        }
    }
}

static void INVOKE_MENU_ACTION(PA_PluginParameters params) {

    int code = PA_GetLongParameter(params, 1);

    switch (code) {
        case 1:
            InvokeMenuAction(@selector(toggleFullScreen:));
            break;
        case 2:
            InvokeMenuAction(@selector(toggleTabBar:));
            break;
        case 3:
            InvokeMenuAction(NSSelectorFromString(@"showAllTabs:"));
            break;
        case 4:
            InvokeMenuAction(@selector(mergeAllWindows:));
            break;
        case 5:
            InvokeMenuAction(@selector(moveTabToNewWindow:));
            break;
        case 6:
            InvokeMenuAction(@selector(toggleToolbarShown:));
            break;
        case 7:
            InvokeMenuAction(@selector(runToolbarCustomizationPalette:));
            break;
        case 8:
            InvokeMenuAction(@selector(performMiniaturize:));
            break;
        case 9:
            InvokeMenuAction(@selector(performZoom:));
            break;
        case 10:
            InvokeMenuAction(@selector(arrangeInFront:));
            break;
        case 11:
            InvokeMenuAction(@selector(selectNextKeyView:));
            break;
        case 12:
            InvokeMenuAction(@selector(selectPreviousKeyView:));
            break;
        case 13:
            InvokeMenuAction(@selector(newTab:));
            break;
        case 14:
            InvokeMenuAction(@selector(newWindowForTab:));
            break;
        case 15:
            InvokeMenuAction(@selector(closeTab:));
            break;
        case 16:
            InvokeMenuAction(@selector(selectNextTab:));
            break;
        case 17:
            InvokeMenuAction(@selector(selectPreviousTab:));
            break;
            
        default:
            break;
    }
}

